{"version":3,"sources":["component/InfoBox.js","component/Table.js","component/utilities/util.js","component/Map.js","component/LineGraph.js","component/utilities/About.js","component/utilities/Header.js","App.js","serviceWorker.js","index.js"],"names":["caseStyle","recovered","color","InfoBox","title","cases","total","active","props","Card","onClick","className","CardContent","Typography","style","Table","countries","map","country","numeral","format","casesTypeColors","hex","multiplier","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","Map","casesType","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","backgroundImage","flag","showDataOnMap","options","legend","display","elements","point","maintainAspectRation","tooltips","mode","intersect","callbacks","lable","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","About","padding","aboutStyle","borderBottom","Header","appStyle","headerStyle","linkStyle","to","textAlign","textDecoration","fontFamily","lineHeight","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","coordinates","exact","path","render","Fragment","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","marginBottom","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fdd6f25.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nconst caseStyle = (recovered) => {\r\n    return {\r\n        color: recovered === false ? '#cc1034' : '#7dd71d'\r\n    }\r\n}\r\n\r\nfunction InfoBox({title, cases, total, active, recovered = false, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}`}>\r\n            <CardContent>\r\n                {/*Title */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                { /*Number of cases*/ }\r\n                <h2 style={caseStyle(recovered)} className=\"infoBox__cases\">{cases}</h2>\r\n\r\n                { /*Total*/ }\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"#000000\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    /*sortedData.sort((a, b) => {\r\n        if(a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;*/\r\n\r\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => \r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType='cases') =>\r\n    data.map(country => (\r\n        <Circle \r\n            center={[country.countryInfo.lat, country.countryInfo.long]} \r\n            fillOpacity={0.4} \r\n            color={casesTypeColors[casesType].hex} \r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n            >\r\n                <Popup>\r\n                    <div className=\"info-container\">\r\n                        <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}/>\r\n                        <div className=\"info-name\" >{country.country}</div>\r\n                        <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                        <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                        <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                    </div>\r\n                </Popup>\r\n            </Circle>\r\n    ));","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './utilities/util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution ='&copy; <a href=\"http://osm.org/copyright\">OpenStreet</a> contributors'/>\r\n                {/* Loop through and draw circles on the screen */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React, { useState, useEffect } from 'react';\r\nimport numeral from 'numeral';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRation: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            lable: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n \r\nfunction LineGraph({casesType}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData(); \r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line \r\n                    options = {options} \r\n                    data = {{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.2\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }} \r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 style={{padding: '10px'}}><big>About</big></h1>\r\n            <p style={aboutStyle}>This is a recreation of the a Covid Tracker Tutorial by Clever Programmer</p>\r\n            <p style={aboutStyle}>Link to tutorial: https://www.youtube.com/watch?v=cF3pIMJUZxM&list=LLdUTSDKoM7uirYykez1cKkg&index=2&t=10911s</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst aboutStyle = {\r\n    padding: '10px',\r\n    borderBottom: '1px #ccc dotted'\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div style={appStyle}>\r\n            <header style={headerStyle}>\r\n                <h1>Covid-19 Tracker</h1>\r\n                <Link style={linkStyle} to=\"/about\">About</Link> | <Link style={linkStyle} to=\"/\">Home</Link>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    backgroundColor: '#333',\r\n    textAlign: 'Center',\r\n    color: '#fff',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\nconst appStyle = {\r\n    fontFamily: 'Arial, Helvetica, sans-serif',\r\n    lineHeight: '1.4'\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from \"./component/InfoBox\";\nimport Table from \"./component/Table\";\nimport Map from './component/Map';\nimport { sortData, prettyPrintStat } from './component/utilities/util';\nimport LineGraph from './component/LineGraph';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport About from './component/utilities/About';\nimport Header from './component/utilities/Header';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]); \n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  // STATE = How to write a variable in React\n\n  // USEEFFECT = Runes a piece of code based on a given condition\n\n  useEffect(() => {\n    // The code inside here will run once when the component\n    // loads and not again\n    // async -> send a request, wait for it, do something with data\n\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n            ));\n            const sortedData = sortData(data);\n            setMapCountries(data);\n            setTableData(sortedData);\n            setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch (url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        const coordinates = countryCode === 'worldwide' ? [34.80746, -40.4796] : [data.countryInfo.lat, data.countryInfo.long];\n        setMapCenter(coordinates);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <Router>\n      <Header />\n      <div className=\"app\">\n        <Route exact path=\"/\" render={props => (\n          <React.Fragment>\n            <div className=\"app__left\">\n              <div className=\"app__header\">\n                <h1>Today</h1>\n                <FormControl className=\"app__dropdown\">\n                  <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n                    {/* Loop through all the countries and show\n                    a drop down list of the options */}\n                    <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                    {countries.map(country => (\n                      <MenuItem value={country.value}>{country.name}</MenuItem>\n                      ))\n                    }\n                  </Select>\n                </FormControl>\n              </div>\n              \n              <div className=\"app__stats\">\n                <InfoBox\n                  active={casesType === \"cases\"}\n                  onClick={(e) => setCasesType(\"cases\")} \n                  title=\"CoronaVirus Cases:\" \n                  cases={prettyPrintStat(countryInfo.todayCases)} \n                  total={prettyPrintStat(countryInfo.cases)}\n                />\n\n                <InfoBox \n                  active={casesType === \"recovered\"}\n                  onClick={(e) => setCasesType(\"recovered\")} \n                  title=\"Recovered:\" \n                  cases={prettyPrintStat(countryInfo.todayRecovered)} \n                  total={prettyPrintStat(countryInfo.recovered)} \n                  recovered={true}\n                />\n\n                <InfoBox\n                  active={casesType === \"deaths\"} \n                  onClick={(e) => setCasesType(\"deaths\")} \n                  title=\"Deaths:\" \n                  cases={prettyPrintStat(countryInfo.todayDeaths)} \n                  total={prettyPrintStat(countryInfo.deaths)}\n                />\n              </div>\n\n              <Map countries={mapCountries} casesType={casesType} center={mapCenter} zoom={mapZoom}/>\n            </div>\n\n            <Card className=\"app__right\">\n              <CardContent>\n                <h3>Live Cases by Country</h3>\n                <Table countries={tableData} />\n                  <h3 style={{marginBottom: '10px'}}>Worldwide new {casesType} </h3>\n                <LineGraph casesType={casesType}/>\n              </CardContent>\n            </Card>\n          </React.Fragment>\n        )} />\n\n        <Route path=\"/about\" component={About}/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}